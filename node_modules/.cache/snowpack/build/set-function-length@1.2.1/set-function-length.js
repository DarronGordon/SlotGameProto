import * as getIntrinsic from 'get-intrinsic';
import * as defineDataProperty from 'define-data-property';
import * as hasPropertyDescriptors from 'has-property-descriptors';
import * as gopd from 'gopd';
import * as type from 'es-errors/type';

function getDefaultExportFromNamespaceIfNotNamed (n) {
	return n && Object.prototype.hasOwnProperty.call(n, 'default') && Object.keys(n).length === 1 ? n['default'] : n;
}

var GetIntrinsic = /*@__PURE__*/getDefaultExportFromNamespaceIfNotNamed(getIntrinsic);

var define = /*@__PURE__*/getDefaultExportFromNamespaceIfNotNamed(defineDataProperty);

var require$$0 = /*@__PURE__*/getDefaultExportFromNamespaceIfNotNamed(hasPropertyDescriptors);

var gOPD = /*@__PURE__*/getDefaultExportFromNamespaceIfNotNamed(gopd);

var $TypeError = /*@__PURE__*/getDefaultExportFromNamespaceIfNotNamed(type);

var hasDescriptors = require$$0();



var $floor = GetIntrinsic('%Math.floor%');

/** @typedef {(...args: unknown[]) => unknown} Func */

/** @type {<T extends Func = Func>(fn: T, length: number, loose?: boolean) => T} */
var setFunctionLength = function setFunctionLength(fn, length) {
	if (typeof fn !== 'function') {
		throw new $TypeError('`fn` is not a function');
	}
	if (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {
		throw new $TypeError('`length` must be a positive 32-bit integer');
	}

	var loose = arguments.length > 2 && !!arguments[2];

	var functionLengthIsConfigurable = true;
	var functionLengthIsWritable = true;
	if ('length' in fn && gOPD) {
		var desc = gOPD(fn, 'length');
		if (desc && !desc.configurable) {
			functionLengthIsConfigurable = false;
		}
		if (desc && !desc.writable) {
			functionLengthIsWritable = false;
		}
	}

	if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
		if (hasDescriptors) {
			define(/** @type {Parameters<define>[0]} */ (fn), 'length', length, true, true);
		} else {
			define(/** @type {Parameters<define>[0]} */ (fn), 'length', length);
		}
	}
	return fn;
};

export default setFunctionLength;
